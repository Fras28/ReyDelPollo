import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import "./Comander.css";
import { asyncPedidoRealizado } from "../../redux/slice";

const SoloComandas = () => {
  const dispatch = useDispatch();
  const { comandas, comandasTrue, comandasFalse } = useSelector(
    (state) => state.alldata
  );
  const [loadingComandas, setLoadingComandas] = useState([]);
  const [selectedDate, setSelectedDate] = useState(new Date()); // Estado para almacenar la fecha seleccionada

  useEffect(() => {
    // Función para obtener la fecha actual en formato "aaaa-mm-dd"
    function obtenerFechaActualEnFormato() {
      const fechaActual = new Date();
      const dia = String(fechaActual.getDate()).padStart(2, "0");
      const mes = String(fechaActual.getMonth() + 1).padStart(2, "0");
      const anio = fechaActual.getFullYear();
      return `${anio}-${mes}-${dia}`;
    }

    // Obtener referencia al input de fecha
    const fechaInput = document.getElementById("fechaInput");

    // Establecer el valor inicial del input de fecha con la fecha actual en formato "aaaa-mm-dd"
    fechaInput.value = obtenerFechaActualEnFormato();

    // Actualizar el valor del campo de texto cada vez que cambie la fecha seleccionada
    fechaInput.addEventListener("input", function () {
      const selectedDateString = this.value; // Obtener la fecha seleccionada en formato "aaaa-mm-dd"
      const selectedDate = new Date(selectedDateString); // Convertir la cadena a objeto de fecha
      setSelectedDate(selectedDate); // Actualizar el estado de la fecha seleccionada
    });
  }, []); // El segundo argumento [] indica que este efecto se ejecuta solo una vez después del montaje inicial del componente

  // Función para convertir una fecha a una cadena con formato "yyyy-mm-dd"
  function formatDateToYYYYMMDD(date) {
    const year = date.getUTCFullYear();
    const month = String(date.getUTCMonth() + 1).padStart(2, "0");
    const day = String(date.getUTCDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  }

  // Función para filtrar las comandas por la fecha seleccionada
  function filtrarComandasPorFecha(comand, fechaSeleccionada) {
    // Convertir la fecha seleccionada al huso horario UTC
    const fechaSeleccionadaUTC = new Date(
      fechaSeleccionada.getTime() +
        fechaSeleccionada.getTimezoneOffset() * 60000
    );
    const fechaSeleccionadaFormato = formatDateToYYYYMMDD(fechaSeleccionadaUTC);

    return comand.filter((comanda) => {
      // Convertir la fecha de la comanda al huso horario UTC
      const fechaComandaUTC = new Date(comanda.attributes.createdAt);
      const fechaComandaFormato = formatDateToYYYYMMDD(fechaComandaUTC);

      return fechaComandaFormato === fechaSeleccionadaFormato;
    });
  }

  // Filtrar las comandas por la fecha seleccionada
  const comandasFiltradas = filtrarComandasPorFecha(comandas, selectedDate);
  const comandasFiltradasTrue = filtrarComandasPorFecha(
    comandasTrue,
    selectedDate
  );
  const comandasFiltradasFalse = filtrarComandasPorFecha(
    comandasFalse,
    selectedDate
  );

  const HandleEntrega = async (comanda) => {
    // Actualiza el estado de carga para la comanda correspondiente
    setLoadingComandas((prevLoadingComandas) => [
      ...prevLoadingComandas,
      comanda.attributes.id,
    ]);

    try {
      await dispatch(asyncPedidoRealizado(comanda));
    } finally {
      // Elimina la comanda del estado de carga una vez que la operación se ha completado
      setLoadingComandas((prevLoadingComandas) =>
        prevLoadingComandas.filter((id) => id !== comanda.attributes.id)
      );
    }
  };


const logo = <svg width="300" viewBox="0 0 699 457" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 457V392.13H16.0628L27.9297 428.564H29.283L41.007 392.13H57.3486V457H45.8354V401.639L47.4743 401.816L33.7577 443.848H22.6729L8.88146 401.816L10.6632 401.639V457H0Z" fill="#727272"/>
<path d="M93.1542 457C89.7343 457 86.6899 456.391 84.0277 455.173C81.3655 453.9 79.1061 452.184 77.2494 450.026C75.4404 447.867 74.0615 445.404 73.1127 442.637C72.157 439.814 71.686 436.853 71.686 433.753V431.843C71.686 428.689 72.157 425.7 73.1127 422.877C74.1093 419.999 75.536 417.48 77.3927 415.322C79.2903 413.163 81.5771 411.475 84.2393 410.257C86.9015 408.984 89.8777 408.348 93.1542 408.348C96.5331 408.348 99.5298 408.984 102.144 410.257C104.806 411.475 107.066 413.163 108.923 415.322C110.779 417.48 112.206 419.999 113.203 422.877C114.199 425.7 114.698 428.689 114.698 431.843V433.753C114.698 436.853 114.227 439.814 113.271 442.637C112.322 445.404 110.916 447.867 109.066 450.026C107.257 452.184 105.025 453.9 102.356 455.173C99.6937 456.391 96.6287 457 93.1542 457ZM93.1542 445.792C95.3932 445.792 97.2431 445.238 98.7175 444.131C100.192 443.024 101.311 441.474 102.076 439.482C102.881 437.489 103.284 435.275 103.284 432.84C103.284 430.238 102.881 427.969 102.076 426.032C101.264 424.039 100.103 422.462 98.581 421.299C97.1066 420.137 95.2976 419.556 93.1542 419.556C91.0654 419.556 89.2565 420.137 87.7343 421.299C86.212 422.462 85.0448 424.039 84.2393 426.032C83.4816 427.969 83.0993 430.238 83.0993 432.84C83.0993 435.275 83.4816 437.489 84.2393 439.482C85.0038 441.474 86.1438 443.024 87.666 444.131C89.1883 445.238 91.0176 445.792 93.1542 445.792Z" fill="#727272"/>
<path d="M121.865 457V408.961H132.639V429.562H132.387C132.387 422.783 133.775 417.552 136.544 413.87C139.377 410.189 143.444 408.348 148.762 408.348H150.54V420.445H147.146C143.42 420.445 140.53 421.497 138.5 423.601C136.462 425.646 135.44 428.627 135.44 432.542V457H121.865Z" fill="#727272"/>
<path d="M173.586 457C169.533 457 166.27 456.385 163.778 455.155C161.293 453.863 159.466 451.74 158.29 448.787C157.17 445.773 156.609 441.713 156.609 436.607V392.13H167.509V437.161C167.509 439.56 167.999 441.405 168.973 442.697C170.002 443.928 171.437 444.543 173.292 444.543H179.214V457H173.586ZM150.54 416.583V405.787H179.214V416.583H150.54Z" fill="#727272"/>
<path d="M207.851 457C204.431 457 201.387 456.391 198.725 455.173C196.063 453.9 193.803 452.184 191.946 450.026C190.137 447.867 188.759 445.404 187.81 442.637C186.861 439.814 186.383 436.853 186.383 433.753V431.843C186.383 428.689 186.861 425.7 187.81 422.877C188.806 419.999 190.233 417.48 192.09 415.322C193.994 413.163 196.274 411.475 198.936 410.257C201.598 408.984 204.575 408.348 207.851 408.348C211.23 408.348 214.227 408.984 216.841 410.257C219.503 411.475 221.763 413.163 223.62 415.322C225.476 417.48 226.903 419.999 227.9 422.877C228.896 425.7 229.395 428.689 229.395 431.843V433.753C229.395 436.853 228.924 439.814 227.968 442.637C227.019 445.404 225.62 447.867 223.763 450.026C221.954 452.184 219.722 453.9 217.06 455.173C214.391 456.391 211.326 457 207.851 457ZM207.851 445.792C210.09 445.792 211.947 445.238 213.421 444.131C214.896 443.024 216.008 441.474 216.773 439.482C217.578 437.489 217.981 435.275 217.981 432.84C217.981 430.238 217.578 427.969 216.773 426.032C215.961 424.039 214.8 422.462 213.278 421.299C211.804 420.137 209.995 419.556 207.851 419.556C205.762 419.556 203.954 420.137 202.431 421.299C200.909 422.462 199.749 424.039 198.936 426.032C198.179 427.969 197.796 430.238 197.796 432.84C197.796 435.275 198.179 437.489 198.936 439.482C199.701 441.474 200.841 443.024 202.363 444.131C203.885 445.238 205.715 445.792 207.851 445.792Z" fill="#727272"/>
<path d="M236.563 457V409.812H247.154V430.047H246.405C246.405 425.225 246.987 421.207 248.151 417.992C249.372 414.777 251.206 412.366 253.654 410.759C256.095 409.151 259.07 408.348 262.571 408.348H263.153C268.489 408.348 272.54 410.156 275.324 413.773C278.155 417.332 279.574 422.757 279.574 430.047V457H266.24V429.272C266.24 426.746 265.514 424.68 264.07 423.072C262.627 421.465 260.681 420.661 258.232 420.661C255.736 420.661 253.71 421.494 252.155 423.159C250.648 424.766 249.898 426.89 249.898 429.531V457H236.563Z" fill="#727272"/>
<path d="M304.689 457C300.151 457 296.286 456.155 293.093 454.466C289.908 452.777 287.46 450.44 285.764 447.455C284.067 444.471 283.223 441.092 283.223 437.32H290.552C290.552 439.178 290.975 441.036 291.826 442.894C292.721 444.752 294.196 446.301 296.236 447.54C298.333 448.779 301.153 449.398 304.689 449.398C307.982 449.398 310.673 448.863 312.77 447.793C314.86 446.667 316.406 445.231 317.409 443.486C318.403 441.684 318.904 439.741 318.904 437.657C318.904 435.123 317.931 433.04 315.984 431.407C314.037 429.718 311.196 428.676 307.459 428.282L301.396 427.69C296.565 427.24 292.7 425.551 289.808 422.623C286.909 419.694 285.463 415.837 285.463 411.051C285.463 407.278 286.265 403.984 287.861 401.168C289.507 398.353 291.776 396.157 294.668 394.58C297.56 392.947 300.924 392.13 304.768 392.13C308.554 392.13 311.897 392.919 314.789 394.496C317.681 396.072 319.928 398.296 321.524 401.168C323.163 403.984 323.987 407.362 323.987 411.304H316.657C316.657 409.333 316.235 407.475 315.39 405.729C314.588 403.984 313.314 402.548 311.575 401.422C309.828 400.296 307.559 399.732 304.768 399.732C302.069 399.732 299.829 400.267 298.032 401.337C296.286 402.407 294.969 403.815 294.067 405.561C293.222 407.25 292.8 409.08 292.8 411.051C292.8 413.303 293.573 415.302 295.119 417.048C296.665 418.793 298.956 419.807 301.998 420.089L308.053 420.68C311.797 421.018 315.011 421.919 317.709 423.383C320.451 424.79 322.541 426.705 323.987 429.126C325.483 431.491 326.234 434.335 326.234 437.657C326.234 441.43 325.332 444.781 323.543 447.709C321.746 450.637 319.227 452.917 315.984 454.551C312.742 456.183 308.977 457 304.689 457Z" fill="#727272"/>
<path d="M354.908 457C351.397 457 348.318 456.317 345.663 454.951C343.001 453.586 340.749 451.793 338.892 449.574C337.086 447.298 335.712 444.766 334.755 441.977C333.856 439.189 333.403 436.344 333.403 433.442V431.906C333.403 429.003 333.877 426.158 334.834 423.37C335.784 420.525 337.187 417.993 339.043 415.773C340.9 413.497 343.152 411.705 345.807 410.396C348.469 409.03 351.498 408.348 354.908 408.348C358.319 408.348 361.348 409.03 364.003 410.396C366.665 411.705 368.917 413.497 370.773 415.773C372.63 417.993 374.033 420.525 374.982 423.37C375.939 426.158 376.414 429.003 376.414 431.906V433.442C376.414 436.344 375.939 439.189 374.982 441.977C374.083 444.766 372.701 447.298 370.845 449.574C369.046 451.793 366.816 453.586 364.154 454.951C361.499 456.317 358.419 457 354.908 457ZM354.908 449.659C357.916 449.659 360.47 448.92 362.578 447.44C364.729 445.904 366.363 443.855 367.464 441.294C368.615 438.734 369.19 435.86 369.19 432.674C369.19 429.43 368.615 426.528 367.464 423.968C366.312 421.407 364.657 419.387 362.499 417.907C360.398 416.428 357.865 415.688 354.908 415.688C352.002 415.688 349.469 416.428 347.31 417.907C345.159 419.387 343.504 421.407 342.353 423.968C341.195 426.528 340.619 429.43 340.619 432.674C340.619 435.86 341.173 438.734 342.274 441.294C343.432 443.855 345.058 445.904 347.167 447.44C349.318 448.92 351.901 449.659 354.908 449.659Z" fill="#727272"/>
<path d="M389.823 457V392.13H397.92V457H389.823ZM383.583 398.884V392.13H397.92V398.884H383.583Z" fill="#727272"/>
<path d="M420.642 457C415.641 457 411.797 455.175 409.115 451.525C406.433 447.876 405.089 442.607 405.089 435.72V408.348H412.665V437.398C412.665 441.106 413.564 444.02 415.354 446.139C417.137 448.199 419.562 449.23 422.614 449.23C425.771 449.23 428.347 448.111 430.349 445.874C432.351 443.579 433.348 440.459 433.348 436.515V408.348H440.932V455.587H434.926V435.367H435.878C435.878 440.017 435.327 443.961 434.216 447.199C433.114 450.377 431.452 452.82 429.246 454.527C427.086 456.176 424.321 457 420.959 457H420.642Z" fill="#727272"/>
<path d="M473.955 457C470.758 457 467.979 456.317 465.619 454.951C463.299 453.586 461.378 451.765 459.849 449.489C458.32 447.156 457.164 444.595 456.379 441.807C455.635 439.018 455.269 436.23 455.269 433.442V431.906C455.269 429.003 455.635 426.158 456.379 423.37C457.164 420.582 458.32 418.078 459.849 415.859C461.425 413.583 463.372 411.762 465.686 410.396C467.999 409.03 470.711 408.348 473.815 408.348C476.92 408.348 479.698 409.059 482.151 410.482C484.651 411.904 486.645 413.924 488.127 416.542C489.649 419.102 490.507 422.147 490.693 425.675H484.305C483.979 422.829 482.916 420.468 481.108 418.59C479.299 416.655 476.873 415.688 473.815 415.688C471.176 415.688 468.976 416.428 467.215 417.907C465.453 419.387 464.137 421.407 463.253 423.968C462.375 426.528 461.936 429.43 461.936 432.674C461.936 435.803 462.375 438.677 463.253 441.294C464.137 443.855 465.453 445.904 467.215 447.44C469.023 448.92 471.269 449.659 473.955 449.659C476.036 449.659 477.844 449.204 479.373 448.294C480.901 447.383 482.125 446.16 483.055 444.623C483.979 443.087 484.538 441.351 484.717 439.417H491.112C490.972 443.002 490.115 446.103 488.539 448.72C487.01 451.338 484.976 453.386 482.43 454.866C479.924 456.288 477.099 457 473.955 457Z" fill="#727272"/>
<path d="M504.886 457V410.189H512.617V457H504.886ZM498.28 416.851V410.189H512.617V416.851H498.28ZM507.06 402.65C505.341 402.65 504.054 402.153 503.19 401.16C502.389 400.166 501.988 398.91 501.988 397.39C501.988 395.871 502.389 394.614 503.19 393.621C504.054 392.627 505.341 392.13 507.06 392.13C508.779 392.13 510.043 392.627 510.844 393.621C511.708 394.614 512.132 395.871 512.132 397.39C512.132 398.91 511.708 400.166 510.844 401.16C510.043 402.153 508.779 402.65 507.06 402.65Z" fill="#727272"/>
<path d="M541.295 457C537.783 457 534.696 456.317 532.041 454.951C529.386 453.586 527.126 451.793 525.277 449.574C523.47 447.298 522.089 444.766 521.139 441.977C520.232 439.189 519.786 436.344 519.786 433.442V431.906C519.786 429.003 520.261 426.158 521.211 423.37C522.168 420.525 523.571 417.993 525.428 415.773C527.277 413.497 529.537 411.705 532.192 410.396C534.847 409.03 537.884 408.348 541.295 408.348C544.699 408.348 547.736 409.03 550.391 410.396C553.047 411.705 555.306 413.497 557.163 415.773C559.012 417.993 560.415 420.525 561.373 423.37C562.322 426.158 562.797 429.003 562.797 431.906V433.442C562.797 436.344 562.322 439.189 561.373 441.977C560.466 444.766 559.091 447.298 557.235 449.574C555.429 451.793 553.198 453.586 550.542 454.951C547.887 456.317 544.8 457 541.295 457ZM541.295 449.659C544.303 449.659 546.858 448.92 548.959 447.44C551.118 445.904 552.744 443.855 553.853 441.294C555.004 438.734 555.58 435.86 555.58 432.674C555.58 429.43 555.004 426.528 553.853 423.968C552.701 421.407 551.046 419.387 548.887 417.907C546.779 416.428 544.253 415.688 541.295 415.688C538.381 415.688 535.855 416.428 533.696 417.907C531.544 419.387 529.889 421.407 528.731 423.968C527.579 426.528 527.004 429.43 527.004 432.674C527.004 435.86 527.558 438.734 528.659 441.294C529.81 443.855 531.444 445.904 533.545 447.44C535.704 448.92 538.287 449.659 541.295 449.659Z" fill="#727272"/>
<path d="M577.134 457V409.763H583.003V430.02H582.079C582.079 425.361 582.619 421.44 583.698 418.255C584.829 415.012 586.529 412.564 588.798 410.913C591.06 409.203 593.921 408.348 597.373 408.348H597.684C602.88 408.348 606.716 410.205 609.193 413.921C611.713 417.636 612.977 423.002 612.977 430.02V457H605.563V428.251C605.563 424.595 604.661 421.675 602.858 419.493C601.054 417.252 598.585 416.132 595.444 416.132C592.199 416.132 589.567 417.282 587.564 419.582C585.554 421.882 584.548 424.948 584.548 428.782V457H577.134Z" fill="#727272"/>
<path d="M638.695 457C635.452 457 632.647 456.317 630.288 454.951C627.928 453.586 626.007 451.793 624.525 449.574C623.043 447.298 621.933 444.766 621.189 441.977C620.498 439.189 620.146 436.344 620.146 433.442V431.906C620.146 428.947 620.498 426.073 621.189 423.285C621.933 420.496 623.043 417.993 624.525 415.773C626.007 413.497 627.882 411.705 630.148 410.396C632.468 409.03 635.173 408.348 638.276 408.348C642.304 408.348 645.614 409.429 648.206 411.591C650.844 413.697 652.792 416.428 654.041 419.785C655.337 423.142 655.988 426.727 655.988 430.54V434.21H623.063V428.065H651.123L649.595 431.393C649.595 428.15 649.183 425.362 648.345 423.029C647.514 420.639 646.265 418.789 644.597 417.481C642.929 416.172 640.822 415.517 638.276 415.517C635.638 415.517 633.438 416.257 631.677 417.737C629.962 419.216 628.666 421.236 627.789 423.797C626.958 426.357 626.539 429.316 626.539 432.674C626.539 435.917 626.958 438.848 627.789 441.465C628.666 444.026 630.008 446.074 631.816 447.611C633.624 449.09 635.917 449.83 638.695 449.83C641.613 449.83 643.972 449.033 645.78 447.44C647.628 445.847 648.737 443.997 649.11 441.892H655.364C654.852 445.022 653.835 447.725 652.306 450.001C650.778 452.277 648.857 454.012 646.544 455.207C644.225 456.402 641.613 457 638.695 457Z" fill="#727272"/>
<path d="M681.079 457C675.432 457 671.044 455.71 667.923 453.132C664.857 450.553 663.265 447.029 663.157 442.559H670.426C670.534 444.335 671.369 446.026 672.929 447.63C674.544 449.178 677.255 449.951 681.079 449.951C684.524 449.951 687.158 449.235 688.989 447.802C690.82 446.312 691.731 444.507 691.731 442.387C691.731 440.496 691.059 439.035 689.715 438.003C688.371 436.914 686.192 436.198 683.18 435.854L678.499 435.338C674.404 434.88 671.067 433.591 668.487 431.47C665.9 429.293 664.61 426.256 664.61 422.359C664.61 419.436 665.312 416.944 666.711 414.88C668.109 412.76 670.048 411.156 672.52 410.067C674.999 408.921 677.85 408.348 681.079 408.348C685.922 408.348 689.854 409.494 692.867 411.786C695.879 414.078 697.44 417.488 697.548 422.015H690.279C690.225 420.181 689.421 418.634 687.861 417.373C686.355 416.055 684.091 415.396 681.079 415.396C678.066 415.396 675.78 416.055 674.219 417.373C672.659 418.691 671.878 420.353 671.878 422.359C671.878 424.078 672.411 425.453 673.493 426.485C674.621 427.516 676.452 428.175 678.978 428.462L683.659 428.978C688.294 429.493 692.001 430.869 694.806 433.104C697.602 435.281 699 438.376 699 442.387C699 445.252 698.22 447.802 696.66 450.037C695.153 452.215 693.052 453.934 690.364 455.195C687.668 456.398 684.578 457 681.079 457Z" fill="#727272"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M82.3772 80.5337C72.5666 119.217 90.0291 167.72 111.741 204.37C115.07 209.989 121.88 213.483 129.48 213.483C142.972 213.483 154.137 201.95 153.225 188.6C150.938 155.132 157.843 120.953 168.302 90.445L168.065 90.3075L168.587 89.613C179.242 58.7834 193.484 31.7613 205.447 13.1001C166.462 14.4381 138.8 21.8588 119.639 32.8255C98.6054 44.8629 87.2011 61.5141 82.3772 80.5337ZM167.777 187.823C165.633 156.462 172.072 124.193 181.908 95.1918C195.148 77.9209 210.664 62.5113 225.968 49.9936C243.179 35.9193 269.288 35.8059 294.049 43.616C304.584 46.939 316.145 49.6914 326.002 49.6914C335.858 49.6914 347.419 46.939 357.955 43.616C382.716 35.8059 408.816 35.9193 426.042 49.9936C441.334 62.5116 456.871 77.9212 470.105 95.1924C479.931 124.194 486.379 156.463 484.23 187.823C483.401 200.009 489.542 212.196 500.105 219.509C499.552 221.004 498.969 222.497 498.355 223.99C476.922 275.323 458.13 310.473 433.964 333.224L426.871 266.755C423.279 233.22 398.867 205.491 365.64 193.003C361.771 185.415 359.674 177.07 359.674 168.443V92.3253C359.674 75.8936 344.597 62.5728 326.002 62.5728C307.406 62.5728 292.33 75.8936 292.33 92.3253V168.443C292.33 177.07 290.232 185.415 286.363 193.003C253.136 205.491 228.719 233.22 225.142 266.755L218.046 333.224C193.865 310.473 175.076 275.324 153.643 223.99C153.023 222.498 152.439 221.004 151.899 219.51C162.468 212.196 168.609 200.009 167.777 187.823ZM512.05 228.449C488.375 285.108 466.912 325.007 435.714 349.709L436.451 356.639C438.478 375.605 421.59 392 400.034 392C385.541 392 371.99 387.136 361.747 378.862C350.699 380.282 338.828 380.958 326.002 380.958C313.176 380.958 301.305 380.282 290.257 378.862C280.013 387.136 266.454 392 251.97 392C230.408 392 213.523 375.605 215.546 356.639L216.286 349.709C185.104 325.007 163.619 285.108 139.966 228.449C139.53 227.408 139.116 226.366 138.717 225.324C135.793 226.002 132.707 226.365 129.48 226.365C116.885 226.365 104.863 220.536 98.8264 210.344C76.6597 172.93 57.1798 120.974 68.151 77.7161C73.7211 55.7647 87.1427 36.0743 111.714 22.0126C136.091 8.05994 170.826 0 218.426 0H221.076L255.891 25.7647C270.418 24.7667 285.436 27.2211 298.95 31.4833C309.08 34.6787 318.718 36.8091 326.002 36.8091C333.282 36.8091 342.921 34.6787 353.054 31.4833C366.567 27.2211 381.58 24.7666 396.104 25.7647L430.924 0H433.565C481.19 0 515.919 8.05994 540.299 22.0126C564.864 36.0743 578.283 55.7647 583.84 77.7161C594.833 120.974 575.335 172.93 553.165 210.344C547.147 220.536 535.11 226.365 522.52 226.365C519.296 226.365 516.195 226.002 513.278 225.324C512.879 226.366 512.48 227.408 512.05 228.449ZM347.168 360.049C348.242 362.491 349.52 364.828 350.978 367.048C343.185 367.735 334.882 368.076 326.002 368.076C317.122 368.076 308.819 367.735 301.026 367.048C302.484 364.828 303.761 362.491 304.836 360.049L308.908 350.801C311.65 344.571 318.439 340.47 326.002 340.47C333.565 340.47 340.354 344.571 343.096 350.801L347.168 360.049ZM345.095 168.443C345.095 175.162 346.142 181.742 348.135 188.03C340.993 186.621 333.583 185.879 326.002 185.879C318.421 185.879 311.011 186.621 303.869 188.03C305.862 181.742 306.909 175.162 306.909 168.443V92.3253C306.909 83.0084 315.457 75.4555 326.002 75.4555C336.546 75.4555 345.095 83.0084 345.095 92.3253V168.443ZM414.343 29.0756C422.081 31.4764 429.42 35.1992 435.929 40.5391C442.194 45.6593 448.488 51.2413 454.66 57.2251C446.984 40.9767 438.847 26.9201 431.753 16.1942L414.343 29.0756ZM483.708 90.445L483.923 90.3075L483.432 89.6139C472.777 58.7837 458.529 31.7613 446.554 13.1001C485.55 14.4381 513.217 21.8588 532.377 32.8255C553.411 44.8629 564.803 61.5141 569.623 80.5337C579.449 119.217 561.978 167.72 540.268 204.37C536.921 209.989 530.136 213.483 522.52 213.483C509.041 213.483 497.863 201.95 498.785 188.6C501.057 155.132 494.148 120.952 483.708 90.445ZM220.253 16.1942L237.661 29.0756C229.913 31.4761 222.596 35.1989 216.065 40.5391C209.804 45.659 203.509 51.241 197.334 57.2245C205.032 40.9764 213.145 26.92 220.253 16.1942ZM326.002 198.761C281.38 198.761 243.839 228.762 239.657 267.965L230.061 357.848C228.845 369.258 238.999 379.118 251.97 379.118C269.349 379.118 284.948 369.692 291.249 355.378L295.32 346.13C300.243 334.952 312.427 327.588 326.002 327.588C339.577 327.588 351.761 334.952 356.683 346.13L360.755 355.378C367.056 369.692 382.655 379.118 400.034 379.118C412.992 379.118 423.156 369.258 421.927 357.848L412.347 267.965C408.171 228.762 370.624 198.761 326.002 198.761ZM326.002 215.322C316.67 215.322 302.714 217.465 290.844 224.152C278.576 231.06 268.726 242.776 268.726 260.865C268.726 271.951 272.322 280.159 278.426 286.11C284.371 291.903 292.041 294.907 298.812 296.799C302.217 297.751 305.576 298.467 308.502 299.081L309.034 299.193V299.193C311.828 299.779 314.088 300.252 315.995 300.785C318.101 301.374 318.964 301.825 319.225 302.015L319.237 302.024C319.237 302.024 319.09 301.906 318.943 301.647C318.755 301.325 318.712 301.033 318.712 300.899H333.291C333.291 301.033 333.248 301.325 333.061 301.647C332.914 301.906 332.766 302.024 332.766 302.024L332.779 302.015C333.04 301.825 333.902 301.374 336.009 300.785C337.919 300.252 340.176 299.779 342.97 299.193V299.193L343.501 299.081C346.428 298.467 349.787 297.751 353.192 296.799C359.963 294.907 367.636 291.903 373.566 286.11C379.676 280.159 383.269 271.951 383.269 260.865C383.269 242.776 373.412 231.06 361.16 224.152C349.289 217.465 335.333 215.322 326.002 215.322ZM331.615 288.502C329.849 288.995 327.869 289.64 326.002 290.574C324.135 289.64 322.154 288.995 320.389 288.502C317.945 287.819 315.172 287.239 312.556 286.691L311.871 286.547C308.939 285.932 306.049 285.31 303.206 284.516C297.482 282.917 292.655 280.8 289.228 277.458C285.961 274.273 283.305 269.331 283.305 260.865C283.305 247.673 290.116 239.838 298.68 235.015C307.633 229.971 318.672 228.204 326.002 228.204C333.331 228.204 344.37 229.971 353.324 235.015C361.888 239.838 368.699 247.673 368.699 260.865C368.699 269.331 366.043 274.273 362.775 277.458C359.349 280.8 354.522 282.917 348.798 284.516C345.955 285.31 343.065 285.932 340.133 286.547L339.448 286.691C336.832 287.239 334.059 287.819 331.615 288.502Z" fill="#FF6C01"/>
</svg>



  return (
    <div style={{ height:"100%"  }}>
      <div style={{ border: "solid grey 2px",height:"75%"  }}>
        <h2 className="titleEditor">Comandas en Tiempo Real</h2>
        <div style={{display:"flex", justifyContent:"center", alignItems:"center"}}>

        <input type="date" id="fechaInput" />

        <h3  style={{ color: "white" }} >Total de pedidos {comandas.length} | </h3>
        <h3 style={{ color: "white" }}>
        Pedido sin
          entregar {comandasFiltradasFalse.length} |  Pedidos realizados {comandasFiltradasTrue.length}
        </h3>
        </div>
        <div className="contComandas"  >
          <div>
            {comandasFiltradasFalse.map((comanda) => (
              <li key={comanda.attributes.id} className="comanda-item">
                <div className="comanda-details">
                  <label className="comanda-label" htmlFor="customer-name">
                    Nombre del Cliente:
                  </label>
                  <span className="comanda-value">
                    {comanda.attributes.name}
                  </span>
                </div>
                <div className="comanda-details">
                  <label className="comanda-label" htmlFor="phone">
                    Teléfono:
                  </label>
                  <span className="comanda-value">
                    {comanda?.attributes?.telefono}
                  </span>
                  {comanda.attributes.domicilio ? (
                    <>
                      <label className="comanda-label" htmlFor="phone">
                        Direccion:
                      </label>
                      <span className="comanda-value">
                        {comanda.attributes.domicilio}
                      </span>
                    </>
                  ) : (
                    <label className="comanda-label" htmlFor="phone">
                      Take Way
                    </label>
                  )}
                </div>
                <div className="comanda-details">
                  <label className="comanda-label" htmlFor="pedido">
                    Pedido:
                  </label>
                  <div className="pedido-items">
                    {comanda.attributes.pedido.split(",").map((item, index) => (
                      <div key={index} className="pedido-item">
                        {item.trim()}
                      </div>
                    ))}
                  </div>
                </div>
                <div className="comanda-details">
                  <label className="comanda-label" htmlFor="pedido-total">
                    Total:
                  </label>
                  <span className="comanda-value">
                    ${comanda.attributes.total_pedido}
                  </span>
                </div>
                <div className="comanda-details" backgroundColor="green">
                  {loadingComandas.includes(comanda.attributes.id) ? (
                    <div className="spinner">Cargando...</div>
                  ) : (
                    <button
                      className="BtnComander2"
                      onClick={() => HandleEntrega(comanda)}
                    >
                      <b>Pendiente</b>
                    </button>
                  )}
                </div>
                <label className="comanda-label" htmlFor="customer-name">
                  {comanda.attributes.createdAt}
                </label>
              </li>
            ))}
          </div>
          <div>
            {comandasFiltradasTrue.map((comanda) => (
              <li key={comanda.attributes.id} className="comanda-item">
                <div className="comanda-details">
                  <label className="comanda-label" htmlFor="customer-name">
                    Nombre del Cliente:
                  </label>
                  <span className="comanda-value">
                    {comanda.attributes.name}
                  </span>
                </div>
                <div className="comanda-details">
                  <label className="comanda-label" htmlFor="phone">
                    Teléfono:
                  </label>
                  <span className="comanda-value">
                  {comanda?.attributes?.telefono}
                  </span>
                  {comanda.attributes.domicilio ? (
                    <>
                      <label className="comanda-label" htmlFor="phone">
                        Direccion:
                      </label>
                      <span className="comanda-value">
                        {comanda.attributes.domicilio}
                      </span>
                    </>
                  ) : (
                    <label className="comanda-label" htmlFor="phone">
                      Take Way
                    </label>
                  )}
                </div>
                <div className="comanda-details">
                  <label className="comanda-label" htmlFor="pedido">
                    Pedido:
                  </label>
                  <div className="pedido-items">
                    {comanda.attributes.pedido.split(",").map((item, index) => (
                      <div key={index} className="pedido-item">
                        {item.trim()}
                      </div>
                    ))}
                  </div>
                </div>
                <div className="comanda-details">
                  <label className="comanda-label" htmlFor="pedido-total">
                    Total:
                  </label>
                  <span className="comanda-value">
                    ${comanda.attributes.total_pedido}
                  </span>
                </div>
                <div className="comanda-details" backgroundColor="green">
                  {loadingComandas.includes(comanda.attributes.id) ? (
                    <div className="spinner">Cargando...</div>
                  ) : (
                    <button
                      className="BtnComander"
                      onClick={() => HandleEntrega(comanda)}
                    >
                      <b>Cancelar entrega</b>
                    </button>
                  )}
                </div>
                <label className="comanda-label" htmlFor="customer-name">
                  {comanda.attributes.createdAt}
                </label>
              </li>
            ))}
          </div>
        </div>
      </div>
      <div style={{ display: "flex",  width: "100%" }} className="contBottomComand">
  <div style={{ border: "solid green 2px", display: "flex", flexDirection: "column", width: "75%" }} className="leftComandBottom">
    <div className="FacturasCont">
    <div className="supSectionFact" style={{ border: "solid grey 2px", height: "30%" }}>
      <select name="tipoFactura" id="">
        <option value="A">Factura A</option>
        <option value="B">Factura B</option>
        <option value="C">Factura C</option>
      </select>
      Seleccion tipo de factura</div>{" "}
    </div>

    <div className="FacturasCont">
    <div className="supSectionFact" style={{ border: "solid grey 2px", height: "30%" }}>
      <select name="tipoFactura" id="">
        <option value="A">Factura A</option>
        <option value="B">Factura B</option>
        <option value="C">Factura C</option>
      </select>
      Seleccion tipo de factura</div>
      </div>
  </div>
  <div style={{ border: "solid grey 2px", backgroundColor: "#173641", flex: "1" }} className="rightComandBottom">
    {logo}
  </div>
</div>
    </div>
  );
};

export default SoloComandas;
